#!/bin/bash
#
# string="\n"
# setup for the subsequent printf comand
#
cat awk_input_file
#
# printf "%b\n" "$string"
# this is reliable newline coding; the echo "\n" coding does not always work
#
# also: the echo does not do newline the very 1st time, so you need echo "\n" or printf
echo " "
echo " "
#
# awk, while reading, splits the file into columns with the following names: $1, $2, $3, etc
# $0 stands for "the entire line"
#
awk '{print $1}' awk_input_file
echo " "
#
awk 'NR!=1{print $1}' awk_input_file # omit the header record
echo " "
#
awk '{print $0}' awk_input_file # this output is equal to "cat awk_input_file"
echo " "
#
awk '1' awk_input_file # 1, a boolean, means the pattern/condition part, not the action part; hence entire line gets printed
echo "now using awk_input_file_delim"
#
awk -F","  '{print $1}' awk_input_file_delim # -F means unstring this CSV file delimited by ',' and print 1st column
echo " "
#
awk  '{print $1,$3}' FS="," awk_input_file_delim # FS="," means unstring this CSV file delimited by ',' and print 1st & 3rd column
echo " "
#
awk -F"," 'NR!=1{print $1,$3}' OFS="," awk_input_file_delim # OFS means output field separator;
# done this way because 3rd column has >1 words delimited by space; hence output will be more readable; also we are eliminating the header-line
echo " "
